@model List<UserManagementViewModel>
@{
    ViewData["Title"] = "User Management";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<style>
    .user-management-card {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .user-management-header {
        background: linear-gradient(135deg, darkred, #ef5350) !important;
        color: white;
    }

    .user-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

        .user-table th {
            background-color: #f8f9fa;
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            border-bottom: 2px solid #e9ecef;
        }

        .user-table td {
            padding: 12px 15px;
            vertical-align: middle;
            border-bottom: 1px solid #e9ecef;
        }

        .user-table tr:last-child td {
            border-bottom: none;
        }

        .user-table tr:hover {
            background-color: rgba(239, 83, 80, 0.05);
        }

    .status-active {
        color: #28a745;
        font-weight: 500;
    }

    .status-blocked {
        color: #dc3545;
        font-weight: 500;
    }

    .btn-block {
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 0.85rem;
        transition: all 0.3s ease;
    }

    .btn-unblock {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 0.85rem;
        transition: all 0.3s ease;
    }

        .btn-block:hover, .btn-unblock:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(229, 57, 53, 0.3);
        }

    .btn-roles {
        background: linear-gradient(135deg, #6c5ce7, #a29bfe);
        color: white;
        border: none;
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 0.85rem;
        transition: all 0.3s ease;
    }

        .btn-roles:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(108, 92, 231, 0.3);
        }

    .role-badge {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 10px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-right: 5px;
        margin-bottom: 5px;
    }

    .role-admin {
        background-color: #e53935;
        color: white;
    }

    .role-manager {
        background-color: #3949ab;
        color: white;
    }

    .role-user {
        background-color: #43a047;
        color: white;
    }

    .dropdown-menu {
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        border: none;
    }

    .dropdown-item {
        padding: 8px 15px;
        font-size: 0.9rem;
    }

        .dropdown-item:hover {
            background-color: #f8f9fa;
            color: darkred;
        }

    .dropdown-divider {
        border-top: 1px solid #e9ecef;
    }

    .search-box {
        position: relative;
        margin-bottom: 20px;
    }

    .search-input {
        padding-left: 40px;
        border-radius: 20px;
        border: 1px solid #ced4da;
        height: 40px;
    }

    .search-icon {
        position: absolute;
        left: 15px;
        top: 10px;
        color: #6c757d;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .page-item.active .page-link {
        background-color: darkred;
        border-color: darkred;
    }

    .page-link {
        color: darkred;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }
</style>

<div class="card user-management-card shadow border-0 mt-4">
    <div class="card-header user-management-header py-3 text-center">
        <h2 class="text-white m-0">User Management</h2>
    </div>
    <div class="card-body p-4">
        <div class="search-box">
            <i class="bi bi-search search-icon"></i>
            <input type="text" class="form-control search-input" id="userSearch" placeholder="Search users...">
        </div>

        <div class="table-responsive">
            <table class="user-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Roles</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                @if (user.IsBlocked)
                                {
                                    <span class="status-blocked">Blocked</span>
                                }
                                else
                                {
                                    <span class="status-active">Active</span>
                                }
                            </td>
                            <td>
                                @foreach (var role in user.AvailableRoles)
                                {
                                    <span class="role-badge @GetRoleBadgeClass(role)">@role</span>
                                }
                            </td>
                            <td>
                                <div class="action-buttons">
                                    @if (user.IsBlocked)
                                    {
                                        <button class="btn-unblock" onclick="unblockUser('@user.Id')">
                                            <i class="bi bi-unlock"></i> Unblock
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn-block" onclick="blockUser('@user.Id')">
                                            <i class="bi bi-lock"></i> Block
                                        </button>
                                    }

                                    <div class="dropdown">
                                        <button class="btn-roles dropdown-toggle" type="button" id="rolesDropdown-@user.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="bi bi-person-gear"></i> Roles
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="rolesDropdown-@user.Id">
                                            <li><h6 class="dropdown-header">Current Roles</h6></li>
                                            @foreach (var role in user.AvailableRoles)
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="removeRole('@user.Id', '@role')">
                                                        <i class="bi bi-dash-circle text-danger"></i> Remove @role
                                                    </a>
                                                </li>
                                            }
                                            <li><hr class="dropdown-divider"></li>
                                            <li><h6 class="dropdown-header">Add Roles</h6></li>
                                            @foreach (var availableRole in user.AvailableRoles.Except(user.AvailableRoles))
                                            {
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="addRole('@user.Id', '@availableRole')">
                                                        <i class="bi bi-plus-circle text-success"></i> Add @availableRole
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (ViewBag.TotalPages > 1)
        {
            <div class="pagination-container">
                <nav aria-label="User pagination">
                    <ul class="pagination">
                        @if (ViewBag.CurrentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1 })" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        }

                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                            </li>
                        }

                        @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1 })" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('userSearch').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('.user-table tbody tr');

            rows.forEach(row => {
                const username = row.cells[1].textContent.toLowerCase();
                const email = row.cells[2].textContent.toLowerCase();

                if (username.includes(searchTerm) || email.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // Block user function
        function blockUser(userId) {
            if (confirm('Are you sure you want to block this user?')) {
                fetch(`/Admin/BlockUser/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error blocking user');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error blocking user');
                });
            }
        }

        // Unblock user function
        function unblockUser(userId) {
            if (confirm('Are you sure you want to unblock this user?')) {
                fetch(`/Admin/UnblockUser/${userId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('Error unblocking user');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error unblocking user');
                });
            }
        }

        // Add role function
        function addRole(userId, role) {
            fetch(`/Admin/AddRoleToUser`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ userId, role })
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error adding role');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding role');
            });
        }

        // Remove role function
        function removeRole(userId, role) {
            fetch(`/Admin/RemoveRoleFromUser`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ userId, role })
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error removing role');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error removing role');
            });
        }
    </script>
}

@functions {
    public string GetRoleBadgeClass(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "role-admin",
            "manager" => "role-manager",
            "user" => "role-user",
            _ => "role-other"
        };
    }
}